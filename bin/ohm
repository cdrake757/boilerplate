#!/usr/bin/env node
var command           = process.argv[2]; // Command to execute
var userArguments     = process.argv.slice(3); // Copies arguments, removes first 3 options (script exec type & exec location & command)

var fs                = require('fs');
var shell             = require('child_process').exec;
var manifest          = __dirname + '/../package.json';
var manifestContent;
var data;

fs.readFile(manifest, bootstrap);
function bootstrap(err, contentAsBuffer){
    if (err) throw err;
    manifestContent = contentAsBuffer.toString('utf8');
    data = JSON.parse(contentAsBuffer);
}
switch (command) {
case "help":
    log("ohm - Node.js Starter Application: Ohm Labs Inc");
    shell('./node_modules/ohm-dock/dock', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
  case "-d":
  case "deploy":
    log("Git Powered Deployment Beginning...");
    if(userArguments.length >= 3){
      shell('./node_modules/ohm-dock/dock -d ' + userArguments[0] + ' ' + userArguments[1] + ' ' + userArguments[2], function(error, stdout, stderr) {
        log(stdout);
      });
    } else {
      log("You need at least 3 arguments (repository, username, branch) from Github");
      process.exit(1);
    }
    break;
case "dev":
    log("Building Development Environment");
    shell('./node_modules/ohm-dock/dock dev', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "docs":
    log("Generating JSDocs and Plato Reports");
    shell('grunt lint', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "install":
    log("Installing Node Modules and Bower Dependencies...");
    shell('npm cache clean;npm install;bower install;ohm link;cd node_module/ghost && npm install;', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "link":
    shell('rm -rf content config.js;ln -Ffs ../../server/ghost/content node_modules/ghost && ln -Ffs ../../server/ghost/config.js node_modules/ghost', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "list":
    log("Listing ohms:");
    shell('forever list', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "-p":
case "prod":
    log("Building Production Environment...");
    shell('./node_modules/ohm-dock/dock -p', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "start":
    log("Starting App...");
    shell('grunt forever:start', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "stop":
    log("Stopping App...");
    shell('grunt forever:stop', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "watch":
    shell('grunt watch', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
case "version":
    shell('grunt version', function(error, stdout, stderr) {
      log(stdout);
    });
    break;
}

function log(message) {
    process.stdout.write(message + '\n');
}

function error(err) {
    process.stderr.write(err);
}
