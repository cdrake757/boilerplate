#!/usr/bin/env node
var userArguments = process.argv.slice(2); // Copies arguments list but removes first two options (script exec type & exec location)
var command           = userArguments[0];
var args              = userArguments[1];

var commander         = require('commander');
var sys               = require('sys');
var fs                = require('fs');
var shell             = require('child_process').exec;
var manifest          = __dirname + '/../package.json';
var manifestContent;
var data;
var project_root      = __dirname + '/../';
var dock              = './node_modules/ohm-dock/dock';

fs.readFile(manifest, bootstrap);
function bootstrap(err, contentAsBuffer){
    if (err) throw err;
    manifestContent = contentAsBuffer.toString('utf8');
    data = JSON.parse(contentAsBuffer);
}
function puts(error, stdout, stderr) {
  if(stdout) {
    sys.print('ohm: ' + stdout);
  }
  if(stderr){
  sys.print('error: ' + stderr);
  }
}
function echo(message) {
  sys.print(message)
}
commander
  .version('0.1.3')
  .option('-b, --bump', 'Versioning App using git tags, package.json')
  .option('-d, --docs', 'Generating JSDocs and Plato Reports')
  .option('-g, --ghost', 'Copying Ghost Content')
  .option('-i, --install', 'Installing... (package.json, Gemfile, bower.json)')
  .option('-l, --list, list', 'Running Node.js Apps...')
  .option('start, --start', 'Starting App with Forever...')
  .option('stop, --stop', 'Stopping App with Forever...')
  .parse(process.argv);

console.log('ohm:' + commander.version());

if (commander.bump) {
  echo('Versioning App using git tags, package.json');
  shell('grunt version', puts);
}
if (commander.docs){
  echo("Generating JSDocs and Plato Reports");
  shell('grunt docs', puts);
}
if (commander.ghost) {
  echo("Creating symlink between your ghost content and the node module...");
  shell('cd node_modules/ghost; rm -rf content; rm -rf config.js;  ln -s ../../server/ghost/content . ; ln -s ../../server/ghost/config.js . ;', puts);
}
if (commander.install){
  echo("Installing Node Modules and Bower Dependencies...");
  shell('bundle install;npm cache clean;npm install;bower install;ohm -g;cd node_module/ghost;npm install --production;', puts);
}
if (commander.list){
  shell('forever list', puts);
}
if (commander.start) {
  echo("Starting App...");
  shell('grunt forever:start', puts);
}
if (commander.stop) {
  echo("Stopping App...");
  shell('grunt forever:stop', puts);
}
